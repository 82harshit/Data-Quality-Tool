from pydantic import BaseModel, Field, model_validator
from typing import Optional, List

from request_models import connection_enum_and_metadata as conn_enum
from logging_config import dqt_logger


class DataSource(BaseModel):
    dir_path: Optional[str] = Field(None, description="Path of dir in which files need to be validated")
    file_name: Optional[str] = Field(None, description="Name of file to be validated")
    table_name: Optional[str] = Field(None, description="Name of table, data of which needs to be validated")

    @model_validator(mode='before')
    def validate_data_source(cls, values):
        if values is None:
            error_msg = "data_source cannot be null or missing."
            dqt_logger.error(error_msg)
            raise ValueError(error_msg)

        dir_path = values.get('dir_path')
        file_name = values.get('file_name')
        table_name = values.get('table_name')

        if table_name and (dir_path or file_name):
                error_msg = "If 'table_name' is given 'file_name' and 'dir_path' must not be specified."
                dqt_logger.error(error_msg)
                raise ValueError(error_msg)
            
        if file_name and table_name:
                error_msg = "If 'file_name' is given 'table_name' must not be specified."
                dqt_logger.error(error_msg)
                raise ValueError(error_msg)
            
        if dir_path:
            if table_name:
                error_msg = "If 'dir_path' is given 'table_name' must not be specified."
                dqt_logger.error(error_msg)
                raise ValueError(error_msg)
            if not file_name:
                error_msg = "Specify 'file_name' when using 'dir_path'."
                dqt_logger.error(error_msg)
                raise ValueError(error_msg)

        return values


class QualityChecks(BaseModel):
    expectation_type: str = Field(str, description="Name of the check that is applied", min_length=11)
    kwargs: dict = Field(dict, description="""Contains the column on which the check is to be applied 
                                            and the arguments for the check""")


class SubmitJob(BaseModel):
    connection_name: str = Field(str, description="Unique connection name generated by create-connection endpoint", 
                                 min_length=36)
    data_source: DataSource
    quality_checks: List[QualityChecks]
    metadata: conn_enum.Metadata
